<?php /** @var G3d_View_Codehinting */ $this; ?>

<link href="http://alexgorbatchev.com/pub/sh/current/styles/shThemeDefault.css" rel="stylesheet" type="text/css" />
<script src="http://alexgorbatchev.com/pub/sh/current/scripts/shCore.js"></script>
<script src="http://alexgorbatchev.com/pub/sh/current/scripts/shBrushPhp.js"></script>

<style>
	code {
		background-color: #FFFFFF;
	}
</style>
<script>
	 SyntaxHighlighter.all()
</script>

<div class="row">
	<div class="col-md-12 col-xs-12">
		<h2>Simple pager <small>The entire class</small></h2>
		
		<pre class="brush: php">
		/**
		* Generates the HTML for a simple pager.
		* 
		* Pager includes next and previous links as well as description text between 
		* the links. All of the text, links, description can be changed to match 
		* the current context.
		* 
		* The pager defaults to an item based text description with the text for the 
		* buttons being 'previous' and 'next' and the class for the ul being 'pager'
		* 
		* The pagination HTML is based purely on the params passed into the view 
		* helper, it is not tied to a model although you could easily modify it 
		* to take a model as a param.
		* 
		* If there are any issues generating the HTML the view helper will generate a 
		* HTML comment containing the error reason
		* 
		* @author Dean Blackborough dean@g3d-development.com
		* @copyright G3D Development Limited
		* @license https://github.com/deanblackborough/g3d-zf1-lib/blob/master/LICENSE.md
		*/
		class G3d_View_SimplePager extends Zend_View_Helper_Abstract 
		{
			private $per_page;
			private $start;
			private $total;
			private $url;
			
			private $text_previous;
			private $text_next;
			private $text_record;
			private $text_records;
			
			private $text_style;
			private $pager_class;
			
			/**
			* Set the base options
			* 
			* @param integer $per_page The number of records to display per page
			* @param integer $start The start record for the pager
			* @param integer $total The total number of records in the entire recordset
			* @param string $url Base url to use for pager links, typiocally the url 
			* 	for the current page
			* 
			* @return G3d_View_SimplePager
			*/
			public function simplePager($per_page, $start, $total, $url) 
			{
				$this->resetParams(); 
				
				$this->per_page = intval($per_page);
				$this->start = intval($start);
				$this->total = intval($total);
				$this->url = $this->view->escape($url);
				
				return $this;
			}
			
			/**
			* Switch to using item based text and optionally override the 
			* text to use for the description
			* 
			* This is the default description setting
			* 
			* @param string $record Text string to refer to single record
			* @param string $records Text string to refer to multiple records
			* @return G3d_View_SimplePager
			*/
			public function itemBasedText($record='Record', $records='Records') 
			{
				$this->text_style = 1;
				
				$this->text_record = $this->view->escape(trim($record));
				$this->text_records = $this->view->escape(trim($records));
				
				return $this;
			}
			
			/**
			* Switch to page based text, page 1 or page 1 of 10.
			* @return G3d_View_SimplePager
			*/
			public function pageBasedText() 
			{
				$this->text_style = 2;
				
				return $this;
			}
			
			/**
			* Alter the button text for the next and previous buttons, defaults to 
			* 'Next' and 'Previous'
			* 
			* @param string $next Text for next button
			* @param string $previous Text for previous button
			* @return G3d_View_SimplePager
			*/
			public function buttonText($next='Next', $previous='Previous')
			{
				$this->text_previous = $this->view->escape(trim($previous));
				$this->text_next = $this->view->escape(trim($next));
				
				return $this;
			}
			
			/**
			* Set the css class for the pager UL, defaults to pager
			* 
			* @param string $pager_class CSS class to use for UL
			* @return G3d_View_SimplePager
			*/
			public function pagerUlClass($pager_class) 
			{
				$this->pager_class = $this->view->escape(trim($pager_class));
				
				return $this;
			}

			/**
			* Reset any internal params, interal properties need to be reset so that 
			* if the view helper is called within the view script each request is 
			* unique
			* 
			* @return void
			*/
			public function resetParams() 
			{
				$this->per_page = 0;
				$this->start = 0;
				$this->total = 0;
				$this->url = NULL;
				
				$this->text_style = 1;
				
				$this->text_next = 'Next';
				$this->text_previous = 'Previous';
				$this->text_record = 'Record';
				$this->text_records = 'Records';
				
				$this->pager_class = 'pager';
			}

			/**
			* Generate the HTML for the pager, working method called by __toString()
			* 
			* @return string 
			*/
			private function render() 
			{
				if($this->total > 0) {
					
					$html = '<ul class="' . $this->pager_class . '">';

					$html .= $this->previousPage();            
					$html .= $this->recordsText();            
					$html .= $this->nextPage();

					$html .= '</ul>';
				} else {
					
					$this->errors[] = 'The total number of records is set as Zero';
					
					$html = $this->errors();
				}

				return $html;
			}

			/**
			* Generate the html for the previous page link
			* 
			* @return string
			*/
			private function previousPage() 
			{
				$html = '';

				if($this->start > 0 && ($this->start < $this->total)) { 
					if($this->start > $this->per_page) {
						$html .= '<li>';
						$html .= '<a href="' . $this->url . '/start/';
						$html .= ($this->start - $this->per_page) . '">';
						$html .= $this->text_previous  .'</a></li>';
					} else {
						$html .= '<li>';
						$html .= '<a href="' . $this->url . '">';
						$html .= $this->text_previous . '</a></li>';
					}
				}

				return $html;
			}

			/**
			* Generate the html for the next page link
			* 
			* @return string
			*/
			private function nextPage() 
			{
				$html = '';

				if($this->total > ($this->start + $this->per_page)) {
					$html .= '<li>'; 
					$html .= '<a href="' . $this->url . '/start/'; 
					$html .= ($this->start + $this->per_page) . '">';
					$html .= $this->text_next . '</a></li>';
				}

				return $html;
			}

			/**
			* Generate the html for the current page text, shows which records have 
			* been selected and if more than one page how many records in total
			* 
			* @return string
			*/
			private function recordsText() 
			{
				$html = '';

				if($this->text_style == 1) {        
					if($this->total > 1) {
						$first = $this->start + 1;
						$of_text = '';

						if($this->total > $this->start + $this->per_page) {
							$last = $this->start + $this->per_page;
							$of_text = ' of ' . $this->total;
						} else {
							$last = $this->total;
						}

						$html .= '<li> ' . $this->text_records . ' ' . $first; 
						$html .= ' - ' . $last . $of_text . ' </li>';
					} else {
						$html .= '<li> ' . $this->text_record . ' 1 of 1 </li>';
					}
				} else {
					if($this->total > $this->per_page) {
						$pages = ceil($this->total/$this->per_page);
						$page = ceil($this->start/$this->per_page)+1;

						$html .= '<li> Page ' . $page. ' of ' . $pages . 
						' </li>' . PHP_EOL;
					} else {
						$html .= '<li> Page 1 </li>' . PHP_EOL;
					}
				}

				return $html;
			}
			
			/**
			* Generate the error string
			* 
			* @return string
			*/
			private function errors() 
			{
				$html = '<!-- Simple pager view helper';
				
				foreach($this->errors as $error) {
					$html .= ' : '  . $this->view->escape($error);
				}
				
				$html .= ' -->';
				
				return $html;
			}

			/**
			* Define __toString to allow the result to be returned when echo 
			* and print are called on the object, simply calls the private render 
			* method
			* 
			* @return string The generated html
			*/
			public function __toString() 
			{
				return $this->render();
			}
		}
		</pre>
	</div>
</div>